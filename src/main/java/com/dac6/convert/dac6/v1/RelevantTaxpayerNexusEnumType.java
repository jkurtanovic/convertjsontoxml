//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.01.28 at 09:09:38 AM CET 
//


package com.dac6.convert.dac6.v1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for RelevantTaxpayerNexus_EnumType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="RelevantTaxpayerNexus_EnumType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="RTNEXa"/&gt;
 *     &lt;enumeration value="RTNEXb"/&gt;
 *     &lt;enumeration value="RTNEXc"/&gt;
 *     &lt;enumeration value="RTNEXd"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "RelevantTaxpayerNexus_EnumType")
@XmlEnum
public enum RelevantTaxpayerNexusEnumType {


    /**
     * The Member State where the relevant taxpayer is resident for tax purposes
     * 
     */
    @XmlEnumValue("RTNEXa")
    RTNE_XA("RTNEXa"),

    /**
     * The Member State where the relevant taxpayer has a permanent establishment benefiting from the arrangement
     * 
     */
    @XmlEnumValue("RTNEXb")
    RTNE_XB("RTNEXb"),

    /**
     * The Member State where the relevant taxpayer receives income or generates profits, although the relevant taxpayer is not resident for tax purposes and has no permanent establishment in any Member State.
     * 
     */
    @XmlEnumValue("RTNEXc")
    RTNE_XC("RTNEXc"),

    /**
     * The Member State where the relevant taxpayer carries on an activity, although the relevant taxpayer is not resident for tax purposes and has no permanent establishment in any Member State
     * 
     */
    @XmlEnumValue("RTNEXd")
    RTNE_XD("RTNEXd");
    private final String value;

    RelevantTaxpayerNexusEnumType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RelevantTaxpayerNexusEnumType fromValue(String v) {
        for (RelevantTaxpayerNexusEnumType c: RelevantTaxpayerNexusEnumType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
