//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.01.28 at 09:09:38 AM CET 
//


package com.dac6.convert.dac6.v1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for IntermediaryNexus_EnumType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="IntermediaryNexus_EnumType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="INEXa"/&gt;
 *     &lt;enumeration value="INEXb"/&gt;
 *     &lt;enumeration value="INEXc"/&gt;
 *     &lt;enumeration value="INEXd"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "IntermediaryNexus_EnumType")
@XmlEnum
public enum IntermediaryNexusEnumType {


    /**
     * The Member State where the intermediary is resident for tax purposes
     * 
     */
    @XmlEnumValue("INEXa")
    INE_XA("INEXa"),

    /**
     * The Member State where the intermediary has a permanent establishment through which the services with respect to the arrangement are provided
     * 
     */
    @XmlEnumValue("INEXb")
    INE_XB("INEXb"),

    /**
     * The Member State where the intermediary is incorporated in or governed by the laws of
     * 
     */
    @XmlEnumValue("INEXc")
    INE_XC("INEXc"),

    /**
     * The Member State where the intermediary is registered with a professional association related to legal, taxation or consultancy services
     * 
     */
    @XmlEnumValue("INEXd")
    INE_XD("INEXd");
    private final String value;

    IntermediaryNexusEnumType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static IntermediaryNexusEnumType fromValue(String v) {
        for (IntermediaryNexusEnumType c: IntermediaryNexusEnumType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
